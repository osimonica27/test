generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "fullTextSearch", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  userWorkspaces UserWorkspace[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id             String          @id @default(cuid())
  name           String
  userId         String
  public         Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userWorkspaces UserWorkspace[]
  documents      Document[]
  pages          Page[]
}

model UserWorkspace {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model Document {
  id          String   @id @default(cuid())
  workspaceId String
  title       String?
  content     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  embeddings  DocumentEmbedding[]
}

model Page {
  id          String    @id @default(cuid())
  workspaceId String
  title       String?
  content     String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

// Vector embedding model for document chunks
model DocumentEmbedding {
  id          String   @id @default(cuid())
  docId       String
  workspaceId String
  chunkIndex  Int
  content     String   @db.Text
  embedding   Unsupported("vector(1536)")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  document    Document @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@index([workspaceId, docId])
  @@index([embedding], type: Ivfflat)
}
